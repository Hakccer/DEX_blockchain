{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "c_tokenPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "c_eth_usd",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "eth_usd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "token_name",
          "type": "string"
        }
      ],
      "name": "getCoinsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "token_name",
          "type": "string"
        }
      ],
      "name": "getTokenAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "token_name",
          "type": "string"
        }
      ],
      "name": "getTokensPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        }
      ],
      "name": "swapETHtoToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenAName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenBName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenACount",
          "type": "uint256"
        }
      ],
      "name": "swapTokenToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "numOfCoins",
          "type": "uint256"
        }
      ],
      "name": "swapTokentoETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6102df36c5a75d7afcf8e37cbb6449959d504f78009da3f37b647f082cfa06af",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3599780",
    "logsBloom": "0x
    "blockHash": "0x6e5ecff15e0a84934737fe54bd63d205304fb6bbec206e7ee3fd8416b7f4d8c5",
    "transactionHash": "0x6102df36c5a75d7afcf8e37cbb6449959d504f78009da3f37b647f082cfa06af",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x6102df36c5a75d7afcf8e37cbb6449959d504f78009da3f37b647f082cfa06af",
        "address": "0xCafac3dD18aC6c6e92c921884f9E4176737C052c",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f0512"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 0,
        "blockHash": "0x6e5ecff15e0a84934737fe54bd63d205304fb6bbec206e7ee3fd8416b7f4d8c5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x6102df36c5a75d7afcf8e37cbb6449959d504f78009da3f37b647f082cfa06af",
        "address": "0x9f1ac54BEF0DD2f6f3462EA0fa94fC62300d3a8e",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f0512"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 1,
        "blockHash": "0x6e5ecff15e0a84934737fe54bd63d205304fb6bbec206e7ee3fd8416b7f4d8c5"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "3599780",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "100000000000000",
      "10000000000000"
    ],
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "a7a72b3ba8790442f534daa7d37b0f63",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"c_tokenPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"c_eth_usd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"eth_usd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token_name\",\"type\":\"string\"}],\"name\":\"getCoinsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token_name\",\"type\":\"string\"}],\"name\":\"getTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token_name\",\"type\":\"string\"}],\"name\":\"getTokensPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"swapETHtoToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenAName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenBName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenACount\",\"type\":\"uint256\"}],\"name\":\"swapTokenToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numOfCoins\",\"type\":\"uint256\"}],\"name\":\"swapTokentoETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DexLow.sol\":\"SwapperSting\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DexLow.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract Token is ERC20{\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol\\r\\n    ) ERC20(name,symbol) {\\r\\n        _mint(msg.sender, 1000000e18);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract SwapperSting{\\r\\n    string[] public tokenNames = [\\r\\n        \\\"NISH\\\",\\r\\n        \\\"AUQ\\\"\\r\\n    ];\\r\\n    mapping (string => Token) internal tokens;\\r\\n    mapping (string => uint256) internal tokenPrices;\\r\\n\\r\\n    address public immutable owner;\\r\\n\\r\\n    address public immutable eth_usd;\\r\\n\\r\\n    constructor(\\r\\n        uint256[] memory c_tokenPrices,\\r\\n        address c_eth_usd\\r\\n    ) {\\r\\n        // adding all the tokens here\\r\\n        uint32 token_index = 0;\\r\\n        while (token_index < tokenNames.length){\\r\\n            tokens[tokenNames[token_index]] = new Token(\\r\\n                tokenNames[token_index],\\r\\n                tokenNames[token_index]\\r\\n            );\\r\\n            tokenPrices[tokenNames[token_index]] = c_tokenPrices[token_index];\\r\\n            token_index++;\\r\\n        }\\r\\n        owner = msg.sender;\\r\\n        eth_usd = c_eth_usd;\\r\\n    }\\r\\n\\r\\n    modifier minimumValue {\\r\\n        require(msg.value > 0, \\\"Value must be greatere than 0\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getTokensPrice(string memory token_name) public view returns(uint256) {\\r\\n        return tokenPrices[token_name];\\r\\n    }\\r\\n    \\r\\n    function getTokenAddr(string memory token_name) public view returns(address){\\r\\n        return address(tokens[token_name]);\\r\\n    }\\r\\n\\r\\n    function getUSDPrice() public view returns(uint256, uint8) {\\r\\n        AggregatorV3Interface aggr_usd = AggregatorV3Interface(eth_usd);\\r\\n        int256 usd_value;\\r\\n        uint8 decimals;\\r\\n        (,usd_value,,,) = aggr_usd.latestRoundData();\\r\\n        decimals = aggr_usd.decimals();\\r\\n        return (uint256(usd_value), decimals);\\r\\n    }\\r\\n\\r\\n    function swapETHtoToken(string memory tokenName) minimumValue public payable returns(uint256){\\r\\n        uint256 exactTokensAmount = (msg.value / tokenPrices[tokenName]) * 1e18;\\r\\n        // now sending this tokens to the msg.sender;\\r\\n        require(tokens[tokenName].transfer(msg.sender, exactTokensAmount));\\r\\n        return exactTokensAmount;\\r\\n    }\\r\\n\\r\\n    function swapTokentoETH(string memory tokenName, uint256 numOfCoins) public returns(uint256){\\r\\n        uint256 exactCoins = numOfCoins;\\r\\n        uint256 ethValueOfCoin = exactCoins * tokenPrices[tokenName];\\r\\n        require(address(this).balance >= ethValueOfCoin,\\\"Dex is low on balance\\\");\\r\\n        payable(msg.sender).transfer(ethValueOfCoin);\\r\\n        uint256 coinsToTakeBack = exactCoins * 1e18;\\r\\n        // now first approving the the amount of tokens user want to give back\\r\\n        require(tokens[tokenName].transferFrom(msg.sender, address(this), coinsToTakeBack));\\r\\n        return ethValueOfCoin;\\r\\n    }\\r\\n\\r\\n    function swapTokenToToken(string memory tokenAName, string memory tokenBName, uint256 tokenACount) public{\\r\\n        uint256 exactCoinstokenA = tokenACount;\\r\\n        uint256 ethExactCoinsAval = exactCoinstokenA * tokenPrices[tokenAName];\\r\\n        // now sending the values to our contract from the Token-A\\r\\n        uint256 tokensToSent = exactCoinstokenA * 1e18;\\r\\n        require(tokens[tokenAName].transferFrom(msg.sender, address(this), tokensToSent));\\r\\n        uint256 ethExactTokenBCoins = (ethExactCoinsAval / tokenPrices[tokenBName]) * 1e18;   \\r\\n        // now sending the values from our contract to the Sender Token-B\\r\\n        require(tokens[tokenBName].transfer(msg.sender, ethExactTokenBCoins));\\r\\n    }\\r\\n\\r\\n    function getCoinsCount(string memory token_name) public view returns(uint256){\\r\\n        return tokenPrices[token_name];\\r\\n    }\\r\\n\\r\\n    function getTokenNames() public view returns(string[] memory){\\r\\n        return tokenNames;\\r\\n    } \\r\\n}\",\"keccak256\":\"0x044aba8a2c0ab352bb59a413e7ddb67f4f4605ee98bd7e54ff30d31c52f37286\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60c060405260405180604001604052806040518060400160405280600481526020017f4e4953480000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f41555100000000000000000000000000000000000000000000000000000000008152508152505f90600262000094929190620002cc565b50348015620000a1575f80fd5b5060405162003aa338038062003aa38339818101604052810190620000c79190620005d5565b5f5b5f805490508163ffffffff1610156200025b575f8163ffffffff1681548110620000f857620000f762000639565b5b905f5260205f20015f8263ffffffff16815481106200011c576200011b62000639565b5b905f5260205f200160405162000132906200032a565b6200013f92919062000776565b604051809103905ff08015801562000159573d5f803e3d5ffd5b5060015f8363ffffffff168154811062000178576200017762000639565b5b905f5260205f20016040516200018f919062000845565b90815260200160405180910390205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828163ffffffff1681518110620001f657620001f562000639565b5b602002602001015160025f8363ffffffff16815481106200021c576200021b62000639565b5b905f5260205f200160405162000233919062000845565b9081526020016040518091039020819055508080620002529062000899565b915050620000c9565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050505062000b68565b828054828255905f5260205f2090810192821562000317579160200282015b828111156200031657825182908162000305919062000a84565b5091602001919060010190620002eb565b5b50905062000326919062000338565b5090565b6119f680620020ad83390190565b5b808211156200035b575f81816200035191906200035f565b5060010162000339565b5090565b5080546200036d9062000693565b5f825580601f106200038057506200039f565b601f0160209004905f5260205f20908101906200039e9190620003a2565b5b50565b5b80821115620003bb575f815f905550600101620003a3565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6200041c82620003d4565b810181811067ffffffffffffffff821117156200043e576200043d620003e4565b5b80604052505050565b5f62000452620003bf565b905062000460828262000411565b919050565b5f67ffffffffffffffff821115620004825762000481620003e4565b5b602082029050602081019050919050565b5f80fd5b5f819050919050565b620004ab8162000497565b8114620004b6575f80fd5b50565b5f81519050620004c981620004a0565b92915050565b5f620004e5620004df8462000465565b62000447565b905080838252602082019050602084028301858111156200050b576200050a62000493565b5b835b81811015620005385780620005238882620004b9565b8452602084019350506020810190506200050d565b5050509392505050565b5f82601f830112620005595762000558620003d0565b5b81516200056b848260208601620004cf565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200059f8262000574565b9050919050565b620005b18162000593565b8114620005bc575f80fd5b50565b5f81519050620005cf81620005a6565b92915050565b5f8060408385031215620005ee57620005ed620003c8565b5b5f83015167ffffffffffffffff8111156200060e576200060d620003cc565b5b6200061c8582860162000542565b92505060206200062f85828601620005bf565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680620006ab57607f821691505b602082108103620006c157620006c062000666565b5b50919050565b5f82825260208201905092915050565b5f819050815f5260205f209050919050565b5f8154620006f78162000693565b620007038186620006c7565b9450600182165f811462000720576001811462000737576200076d565b60ff1983168652811515602002860193506200076d565b6200074285620006d7565b5f5b83811015620007655781548189015260018201915060208101905062000744565b808801955050505b50505092915050565b5f6040820190508181035f830152620007908185620006e9565b90508181036020830152620007a68184620006e9565b90509392505050565b5f81905092915050565b5f8154620007c78162000693565b620007d38186620007af565b9450600182165f8114620007f0576001811462000806576200083c565b60ff19831686528115158202860193506200083c565b6200081185620006d7565b5f5b83811015620008345781548189015260018201915060208101905062000813565b838801955050505b50505092915050565b5f620008528284620007b9565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f63ffffffff82169050919050565b5f620008a5826200088a565b915063ffffffff8203620008be57620008bd6200085d565b5b600182019050919050565b5f81519050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026200091f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620008e2565b6200092b8683620008e2565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6200096c62000966620009608462000497565b62000943565b62000497565b9050919050565b5f819050919050565b62000987836200094c565b6200099f620009968262000973565b848454620008ee565b825550505050565b5f90565b620009b5620009a7565b620009c28184846200097c565b505050565b5b81811015620009e957620009dd5f82620009ab565b600181019050620009c8565b5050565b601f82111562000a385762000a0281620006d7565b62000a0d84620008d3565b8101602085101562000a1d578190505b62000a3562000a2c85620008d3565b830182620009c7565b50505b505050565b5f82821c905092915050565b5f62000a5a5f198460080262000a3d565b1980831691505092915050565b5f62000a74838362000a49565b9150826002028217905092915050565b62000a8f82620008c9565b67ffffffffffffffff81111562000aab5762000aaa620003e4565b5b62000ab7825462000693565b62000ac4828285620009ed565b5f60209050601f83116001811462000afa575f841562000ae5578287015190505b62000af1858262000a67565b86555062000b60565b601f19841662000b0a86620006d7565b5f5b8281101562000b335784890151825560018201915060208501945060208101905062000b0c565b8683101562000b53578489015162000b4f601f89168262000a49565b8355505b6001600288020188555050505b505050505050565b60805160a05161151c62000b915f395f81816107e80152610a2201525f610626015261151c5ff3fe60806040526004361061009b575f3560e01c80637720abe9116100635780637720abe9146101ad5780638da5cb5b146101e9578063b08803ea14610213578063b0fd08711461024f578063bf015aae14610279578063c338287f146102a15761009b565b80630983499e1461009f5780632ad753e4146100db578063310495ab1461010557806365b25bae146101415780636ff4206f14610171575b5f80fd5b3480156100aa575f80fd5b506100c560048036038101906100c09190610c8a565b6102cc565b6040516100d29190610ce9565b60405180910390f35b3480156100e6575f80fd5b506100ef6102f3565b6040516100fc9190610e37565b60405180910390f35b348015610110575f80fd5b5061012b60048036038101906101269190610e81565b6103c6565b6040516101389190610ef4565b60405180910390f35b61015b60048036038101906101569190610c8a565b61046b565b6040516101689190610ce9565b60405180910390f35b34801561017c575f80fd5b5061019760048036038101906101929190610c8a565b6105b7565b6040516101a49190610f53565b60405180910390f35b3480156101b8575f80fd5b506101d360048036038101906101ce9190610c8a565b6105fd565b6040516101e09190610ce9565b60405180910390f35b3480156101f4575f80fd5b506101fd610624565b60405161020a9190610f53565b60405180910390f35b34801561021e575f80fd5b5061023960048036038101906102349190610f6c565b610648565b6040516102469190610ce9565b60405180910390f35b34801561025a575f80fd5b506102636107e6565b6040516102709190610f53565b60405180910390f35b348015610284575f80fd5b5061029f600480360381019061029a9190610fc6565b61080a565b005b3480156102ac575f80fd5b506102b5610a1d565b6040516102c3929190611069565b60405180910390f35b5f6002826040516102dd91906110ca565b9081526020016040518091039020549050919050565b60605f805480602002602001604051908101604052809291908181526020015f905b828210156103bd578382905f5260205f200180546103329061110d565b80601f016020809104026020016040519081016040528092919081815260200182805461035e9061110d565b80156103a95780601f10610380576101008083540402835291602001916103a9565b820191905f5260205f20905b81548152906001019060200180831161038c57829003601f168201915b505050505081526020019060010190610315565b50505050905090565b5f81815481106103d4575f80fd5b905f5260205f20015f9150905080546103ec9061110d565b80601f01602080910402602001604051908101604052809291908181526020018280546104189061110d565b80156104635780601f1061043a57610100808354040283529160200191610463565b820191905f5260205f20905b81548152906001019060200180831161044657829003601f168201915b505050505081565b5f8034116104ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a590611187565b60405180910390fd5b5f670de0b6b3a76400006002846040516104c891906110ca565b908152602001604051809103902054346104e291906111ff565b6104ec919061122f565b90506001836040516104fe91906110ca565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610566929190611270565b6020604051808303815f875af1158015610582573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105a691906112cc565b6105ae575f80fd5b80915050919050565b5f6001826040516105c891906110ca565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f60028260405161060e91906110ca565b9081526020016040518091039020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f808290505f60028560405161065e91906110ca565b90815260200160405180910390205482610678919061122f565b9050804710156106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490611341565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610700573d5f803e3d5ffd5b505f670de0b6b3a764000083610716919061122f565b905060018660405161072891906110ca565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016107929392919061135f565b6020604051808303815f875af11580156107ae573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d291906112cc565b6107da575f80fd5b81935050505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f8190505f60028560405161081f91906110ca565b90815260200160405180910390205482610839919061122f565b90505f670de0b6b3a764000083610850919061122f565b905060018660405161086291906110ca565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016108cc9392919061135f565b6020604051808303815f875af11580156108e8573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061090c91906112cc565b610914575f80fd5b5f670de0b6b3a764000060028760405161092e91906110ca565b9081526020016040518091039020548461094891906111ff565b610952919061122f565b905060018660405161096491906110ca565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016109cc929190611270565b6020604051808303815f875af11580156109e8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a0c91906112cc565b610a14575f80fd5b50505050505050565b5f805f7f000000000000000000000000000000000000000000000000000000000000000090505f808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a8e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ab2919061141a565b9091929350909150905050809250508273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b0a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b2e91906114bb565b90508181945094505050509091565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610b9c82610b56565b810181811067ffffffffffffffff82111715610bbb57610bba610b66565b5b80604052505050565b5f610bcd610b3d565b9050610bd98282610b93565b919050565b5f67ffffffffffffffff821115610bf857610bf7610b66565b5b610c0182610b56565b9050602081019050919050565b828183375f83830152505050565b5f610c2e610c2984610bde565b610bc4565b905082815260208101848484011115610c4a57610c49610b52565b5b610c55848285610c0e565b509392505050565b5f82601f830112610c7157610c70610b4e565b5b8135610c81848260208601610c1c565b91505092915050565b5f60208284031215610c9f57610c9e610b46565b5b5f82013567ffffffffffffffff811115610cbc57610cbb610b4a565b5b610cc884828501610c5d565b91505092915050565b5f819050919050565b610ce381610cd1565b82525050565b5f602082019050610cfc5f830184610cda565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610d62578082015181840152602081019050610d47565b5f8484015250505050565b5f610d7782610d2b565b610d818185610d35565b9350610d91818560208601610d45565b610d9a81610b56565b840191505092915050565b5f610db08383610d6d565b905092915050565b5f602082019050919050565b5f610dce82610d02565b610dd88185610d0c565b935083602082028501610dea85610d1c565b805f5b85811015610e255784840389528151610e068582610da5565b9450610e1183610db8565b925060208a01995050600181019050610ded565b50829750879550505050505092915050565b5f6020820190508181035f830152610e4f8184610dc4565b905092915050565b610e6081610cd1565b8114610e6a575f80fd5b50565b5f81359050610e7b81610e57565b92915050565b5f60208284031215610e9657610e95610b46565b5b5f610ea384828501610e6d565b91505092915050565b5f82825260208201905092915050565b5f610ec682610d2b565b610ed08185610eac565b9350610ee0818560208601610d45565b610ee981610b56565b840191505092915050565b5f6020820190508181035f830152610f0c8184610ebc565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610f3d82610f14565b9050919050565b610f4d81610f33565b82525050565b5f602082019050610f665f830184610f44565b92915050565b5f8060408385031215610f8257610f81610b46565b5b5f83013567ffffffffffffffff811115610f9f57610f9e610b4a565b5b610fab85828601610c5d565b9250506020610fbc85828601610e6d565b9150509250929050565b5f805f60608486031215610fdd57610fdc610b46565b5b5f84013567ffffffffffffffff811115610ffa57610ff9610b4a565b5b61100686828701610c5d565b935050602084013567ffffffffffffffff81111561102757611026610b4a565b5b61103386828701610c5d565b925050604061104486828701610e6d565b9150509250925092565b5f60ff82169050919050565b6110638161104e565b82525050565b5f60408201905061107c5f830185610cda565b611089602083018461105a565b9392505050565b5f81905092915050565b5f6110a482610d2b565b6110ae8185611090565b93506110be818560208601610d45565b80840191505092915050565b5f6110d5828461109a565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061112457607f821691505b602082108103611137576111366110e0565b5b50919050565b7f56616c7565206d757374206265206772656174657265207468616e20300000005f82015250565b5f611171601d83610eac565b915061117c8261113d565b602082019050919050565b5f6020820190508181035f83015261119e81611165565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61120982610cd1565b915061121483610cd1565b925082611224576112236111a5565b5b828204905092915050565b5f61123982610cd1565b915061124483610cd1565b925082820261125281610cd1565b91508282048414831517611269576112686111d2565b5b5092915050565b5f6040820190506112835f830185610f44565b6112906020830184610cda565b9392505050565b5f8115159050919050565b6112ab81611297565b81146112b5575f80fd5b50565b5f815190506112c6816112a2565b92915050565b5f602082840312156112e1576112e0610b46565b5b5f6112ee848285016112b8565b91505092915050565b7f446578206973206c6f77206f6e2062616c616e636500000000000000000000005f82015250565b5f61132b601583610eac565b9150611336826112f7565b602082019050919050565b5f6020820190508181035f8301526113588161131f565b9050919050565b5f6060820190506113725f830186610f44565b61137f6020830185610f44565b61138c6040830184610cda565b949350505050565b5f69ffffffffffffffffffff82169050919050565b6113b281611394565b81146113bc575f80fd5b50565b5f815190506113cd816113a9565b92915050565b5f819050919050565b6113e5816113d3565b81146113ef575f80fd5b50565b5f81519050611400816113dc565b92915050565b5f8151905061141481610e57565b92915050565b5f805f805f60a0868803121561143357611432610b46565b5b5f611440888289016113bf565b9550506020611451888289016113f2565b945050604061146288828901611406565b935050606061147388828901611406565b9250506080611484888289016113bf565b9150509295509295909350565b61149a8161104e565b81146114a4575f80fd5b50565b5f815190506114b581611491565b92915050565b5f602082840312156114d0576114cf610b46565b5b5f6114dd848285016114a7565b9150509291505056fea264697066735822122096c21dfb8840a2adadfe4c1b34844af3ae865260bdec04bd5d93489364a090fc64736f6c63430008140033608060405234801562000010575f80fd5b50604051620019f6380380620019f6833981810160405281019062000036919062000376565b8181816003908162000049919062000630565b5080600490816200005b919062000630565b5050506200007a3369d3c21bcecceda10000006200008260201b60201c565b505062000825565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ea9062000772565b60405180910390fd5b620001065f8383620001e760201b60201c565b8060025f828254620001199190620007bf565b92505081905550805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620001c891906200080a565b60405180910390a3620001e35f8383620001ec60201b60201c565b5050565b505050565b505050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b62000252826200020a565b810181811067ffffffffffffffff821117156200027457620002736200021a565b5b80604052505050565b5f62000288620001f1565b905062000296828262000247565b919050565b5f67ffffffffffffffff821115620002b857620002b76200021a565b5b620002c3826200020a565b9050602081019050919050565b5f5b83811015620002ef578082015181840152602081019050620002d2565b5f8484015250505050565b5f620003106200030a846200029b565b6200027d565b9050828152602081018484840111156200032f576200032e62000206565b5b6200033c848285620002d0565b509392505050565b5f82601f8301126200035b576200035a62000202565b5b81516200036d848260208601620002fa565b91505092915050565b5f80604083850312156200038f576200038e620001fa565b5b5f83015167ffffffffffffffff811115620003af57620003ae620001fe565b5b620003bd8582860162000344565b925050602083015167ffffffffffffffff811115620003e157620003e0620001fe565b5b620003ef8582860162000344565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200044857607f821691505b6020821081036200045e576200045d62000403565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620004c27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000485565b620004ce868362000485565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f62000518620005126200050c84620004e6565b620004ef565b620004e6565b9050919050565b5f819050919050565b6200053383620004f8565b6200054b62000542826200051f565b84845462000491565b825550505050565b5f90565b6200056162000553565b6200056e81848462000528565b505050565b5b818110156200059557620005895f8262000557565b60018101905062000574565b5050565b601f821115620005e457620005ae8162000464565b620005b98462000476565b81016020851015620005c9578190505b620005e1620005d88562000476565b83018262000573565b50505b505050565b5f82821c905092915050565b5f620006065f1984600802620005e9565b1980831691505092915050565b5f620006208383620005f5565b9150826002028217905092915050565b6200063b82620003f9565b67ffffffffffffffff8111156200065757620006566200021a565b5b62000663825462000430565b6200067082828562000599565b5f60209050601f831160018114620006a6575f841562000691578287015190505b6200069d858262000613565b8655506200070c565b601f198416620006b68662000464565b5f5b82811015620006df57848901518255600182019150602085019450602081019050620006b8565b86831015620006ff5784890151620006fb601f891682620005f5565b8355505b6001600288020188555050505b505050505050565b5f82825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f6200075a601f8362000714565b9150620007678262000724565b602082019050919050565b5f6020820190508181035f8301526200078b816200074c565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f620007cb82620004e6565b9150620007d883620004e6565b9250828201905080821115620007f357620007f262000792565b5b92915050565b6200080481620004e6565b82525050565b5f6020820190506200081f5f830184620007f9565b92915050565b6111c380620008335f395ff3fe608060405234801561000f575f80fd5b50600436106100a7575f3560e01c8063395093511161006f578063395093511461016557806370a082311461019557806395d89b41146101c5578063a457c2d7146101e3578063a9059cbb14610213578063dd62ed3e14610243576100a7565b806306fdde03146100ab578063095ea7b3146100c957806318160ddd146100f957806323b872dd14610117578063313ce56714610147575b5f80fd5b6100b3610273565b6040516100c09190610add565b60405180910390f35b6100e360048036038101906100de9190610b8e565b610303565b6040516100f09190610be6565b60405180910390f35b610101610325565b60405161010e9190610c0e565b60405180910390f35b610131600480360381019061012c9190610c27565b61032e565b60405161013e9190610be6565b60405180910390f35b61014f61035c565b60405161015c9190610c92565b60405180910390f35b61017f600480360381019061017a9190610b8e565b610364565b60405161018c9190610be6565b60405180910390f35b6101af60048036038101906101aa9190610cab565b61039a565b6040516101bc9190610c0e565b60405180910390f35b6101cd6103df565b6040516101da9190610add565b60405180910390f35b6101fd60048036038101906101f89190610b8e565b61046f565b60405161020a9190610be6565b60405180910390f35b61022d60048036038101906102289190610b8e565b6104e4565b60405161023a9190610be6565b60405180910390f35b61025d60048036038101906102589190610cd6565b610506565b60405161026a9190610c0e565b60405180910390f35b60606003805461028290610d41565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90610d41565b80156102f95780601f106102d0576101008083540402835291602001916102f9565b820191905f5260205f20905b8154815290600101906020018083116102dc57829003601f168201915b5050505050905090565b5f8061030d610588565b905061031a81858561058f565b600191505092915050565b5f600254905090565b5f80610338610588565b9050610345858285610752565b6103508585856107dd565b60019150509392505050565b5f6012905090565b5f8061036e610588565b905061038f8185856103808589610506565b61038a9190610d9e565b61058f565b600191505092915050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6060600480546103ee90610d41565b80601f016020809104026020016040519081016040528092919081815260200182805461041a90610d41565b80156104655780601f1061043c57610100808354040283529160200191610465565b820191905f5260205f20905b81548152906001019060200180831161044857829003601f168201915b5050505050905090565b5f80610479610588565b90505f6104868286610506565b9050838110156104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c290610e41565b60405180910390fd5b6104d8828686840361058f565b60019250505092915050565b5f806104ee610588565b90506104fb8185856107dd565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f490610ecf565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361066b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066290610f5d565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107459190610c0e565b60405180910390a3505050565b5f61075d8484610506565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107d757818110156107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c090610fc5565b60405180910390fd5b6107d6848484840361058f565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361084b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084290611053565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b0906110e1565b60405180910390fd5b6108c4838383610a49565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e9061116f565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a309190610c0e565b60405180910390a3610a43848484610a4e565b50505050565b505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610a8a578082015181840152602081019050610a6f565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610aaf82610a53565b610ab98185610a5d565b9350610ac9818560208601610a6d565b610ad281610a95565b840191505092915050565b5f6020820190508181035f830152610af58184610aa5565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610b2a82610b01565b9050919050565b610b3a81610b20565b8114610b44575f80fd5b50565b5f81359050610b5581610b31565b92915050565b5f819050919050565b610b6d81610b5b565b8114610b77575f80fd5b50565b5f81359050610b8881610b64565b92915050565b5f8060408385031215610ba457610ba3610afd565b5b5f610bb185828601610b47565b9250506020610bc285828601610b7a565b9150509250929050565b5f8115159050919050565b610be081610bcc565b82525050565b5f602082019050610bf95f830184610bd7565b92915050565b610c0881610b5b565b82525050565b5f602082019050610c215f830184610bff565b92915050565b5f805f60608486031215610c3e57610c3d610afd565b5b5f610c4b86828701610b47565b9350506020610c5c86828701610b47565b9250506040610c6d86828701610b7a565b9150509250925092565b5f60ff82169050919050565b610c8c81610c77565b82525050565b5f602082019050610ca55f830184610c83565b92915050565b5f60208284031215610cc057610cbf610afd565b5b5f610ccd84828501610b47565b91505092915050565b5f8060408385031215610cec57610ceb610afd565b5b5f610cf985828601610b47565b9250506020610d0a85828601610b47565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610d5857607f821691505b602082108103610d6b57610d6a610d14565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610da882610b5b565b9150610db383610b5b565b9250828201905080821115610dcb57610dca610d71565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f610e2b602583610a5d565b9150610e3682610dd1565b604082019050919050565b5f6020820190508181035f830152610e5881610e1f565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f610eb9602483610a5d565b9150610ec482610e5f565b604082019050919050565b5f6020820190508181035f830152610ee681610ead565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f610f47602283610a5d565b9150610f5282610eed565b604082019050919050565b5f6020820190508181035f830152610f7481610f3b565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000005f82015250565b5f610faf601d83610a5d565b9150610fba82610f7b565b602082019050919050565b5f6020820190508181035f830152610fdc81610fa3565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f61103d602583610a5d565b915061104882610fe3565b604082019050919050565b5f6020820190508181035f83015261106a81611031565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f6110cb602383610a5d565b91506110d682611071565b604082019050919050565b5f6020820190508181035f8301526110f8816110bf565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f611159602683610a5d565b9150611164826110ff565b604082019050919050565b5f6020820190508181035f8301526111868161114d565b905091905056fea2646970667358221220847b09692e39ac6168968a0f8f489f9550c039f5eee612d6a468cb76422aae9c64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061009b575f3560e01c80637720abe9116100635780637720abe9146101ad5780638da5cb5b146101e9578063b08803ea14610213578063b0fd08711461024f578063bf015aae14610279578063c338287f146102a15761009b565b80630983499e1461009f5780632ad753e4146100db578063310495ab1461010557806365b25bae146101415780636ff4206f14610171575b5f80fd5b3480156100aa575f80fd5b506100c560048036038101906100c09190610c8a565b6102cc565b6040516100d29190610ce9565b60405180910390f35b3480156100e6575f80fd5b506100ef6102f3565b6040516100fc9190610e37565b60405180910390f35b348015610110575f80fd5b5061012b60048036038101906101269190610e81565b6103c6565b6040516101389190610ef4565b60405180910390f35b61015b60048036038101906101569190610c8a565b61046b565b6040516101689190610ce9565b60405180910390f35b34801561017c575f80fd5b5061019760048036038101906101929190610c8a565b6105b7565b6040516101a49190610f53565b60405180910390f35b3480156101b8575f80fd5b506101d360048036038101906101ce9190610c8a565b6105fd565b6040516101e09190610ce9565b60405180910390f35b3480156101f4575f80fd5b506101fd610624565b60405161020a9190610f53565b60405180910390f35b34801561021e575f80fd5b5061023960048036038101906102349190610f6c565b610648565b6040516102469190610ce9565b60405180910390f35b34801561025a575f80fd5b506102636107e6565b6040516102709190610f53565b60405180910390f35b348015610284575f80fd5b5061029f600480360381019061029a9190610fc6565b61080a565b005b3480156102ac575f80fd5b506102b5610a1d565b6040516102c3929190611069565b60405180910390f35b5f6002826040516102dd91906110ca565b9081526020016040518091039020549050919050565b60605f805480602002602001604051908101604052809291908181526020015f905b828210156103bd578382905f5260205f200180546103329061110d565b80601f016020809104026020016040519081016040528092919081815260200182805461035e9061110d565b80156103a95780601f10610380576101008083540402835291602001916103a9565b820191905f5260205f20905b81548152906001019060200180831161038c57829003601f168201915b505050505081526020019060010190610315565b50505050905090565b5f81815481106103d4575f80fd5b905f5260205f20015f9150905080546103ec9061110d565b80601f01602080910402602001604051908101604052809291908181526020018280546104189061110d565b80156104635780601f1061043a57610100808354040283529160200191610463565b820191905f5260205f20905b81548152906001019060200180831161044657829003601f168201915b505050505081565b5f8034116104ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a590611187565b60405180910390fd5b5f670de0b6b3a76400006002846040516104c891906110ca565b908152602001604051809103902054346104e291906111ff565b6104ec919061122f565b90506001836040516104fe91906110ca565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610566929190611270565b6020604051808303815f875af1158015610582573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105a691906112cc565b6105ae575f80fd5b80915050919050565b5f6001826040516105c891906110ca565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f60028260405161060e91906110ca565b9081526020016040518091039020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f808290505f60028560405161065e91906110ca565b90815260200160405180910390205482610678919061122f565b9050804710156106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490611341565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610700573d5f803e3d5ffd5b505f670de0b6b3a764000083610716919061122f565b905060018660405161072891906110ca565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016107929392919061135f565b6020604051808303815f875af11580156107ae573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d291906112cc565b6107da575f80fd5b81935050505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f8190505f60028560405161081f91906110ca565b90815260200160405180910390205482610839919061122f565b90505f670de0b6b3a764000083610850919061122f565b905060018660405161086291906110ca565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016108cc9392919061135f565b6020604051808303815f875af11580156108e8573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061090c91906112cc565b610914575f80fd5b5f670de0b6b3a764000060028760405161092e91906110ca565b9081526020016040518091039020548461094891906111ff565b610952919061122f565b905060018660405161096491906110ca565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016109cc929190611270565b6020604051808303815f875af11580156109e8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a0c91906112cc565b610a14575f80fd5b50505050505050565b5f805f7f000000000000000000000000000000000000000000000000000000000000000090505f808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a8e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ab2919061141a565b9091929350909150905050809250508273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b0a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b2e91906114bb565b90508181945094505050509091565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610b9c82610b56565b810181811067ffffffffffffffff82111715610bbb57610bba610b66565b5b80604052505050565b5f610bcd610b3d565b9050610bd98282610b93565b919050565b5f67ffffffffffffffff821115610bf857610bf7610b66565b5b610c0182610b56565b9050602081019050919050565b828183375f83830152505050565b5f610c2e610c2984610bde565b610bc4565b905082815260208101848484011115610c4a57610c49610b52565b5b610c55848285610c0e565b509392505050565b5f82601f830112610c7157610c70610b4e565b5b8135610c81848260208601610c1c565b91505092915050565b5f60208284031215610c9f57610c9e610b46565b5b5f82013567ffffffffffffffff811115610cbc57610cbb610b4a565b5b610cc884828501610c5d565b91505092915050565b5f819050919050565b610ce381610cd1565b82525050565b5f602082019050610cfc5f830184610cda565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610d62578082015181840152602081019050610d47565b5f8484015250505050565b5f610d7782610d2b565b610d818185610d35565b9350610d91818560208601610d45565b610d9a81610b56565b840191505092915050565b5f610db08383610d6d565b905092915050565b5f602082019050919050565b5f610dce82610d02565b610dd88185610d0c565b935083602082028501610dea85610d1c565b805f5b85811015610e255784840389528151610e068582610da5565b9450610e1183610db8565b925060208a01995050600181019050610ded565b50829750879550505050505092915050565b5f6020820190508181035f830152610e4f8184610dc4565b905092915050565b610e6081610cd1565b8114610e6a575f80fd5b50565b5f81359050610e7b81610e57565b92915050565b5f60208284031215610e9657610e95610b46565b5b5f610ea384828501610e6d565b91505092915050565b5f82825260208201905092915050565b5f610ec682610d2b565b610ed08185610eac565b9350610ee0818560208601610d45565b610ee981610b56565b840191505092915050565b5f6020820190508181035f830152610f0c8184610ebc565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610f3d82610f14565b9050919050565b610f4d81610f33565b82525050565b5f602082019050610f665f830184610f44565b92915050565b5f8060408385031215610f8257610f81610b46565b5b5f83013567ffffffffffffffff811115610f9f57610f9e610b4a565b5b610fab85828601610c5d565b9250506020610fbc85828601610e6d565b9150509250929050565b5f805f60608486031215610fdd57610fdc610b46565b5b5f84013567ffffffffffffffff811115610ffa57610ff9610b4a565b5b61100686828701610c5d565b935050602084013567ffffffffffffffff81111561102757611026610b4a565b5b61103386828701610c5d565b925050604061104486828701610e6d565b9150509250925092565b5f60ff82169050919050565b6110638161104e565b82525050565b5f60408201905061107c5f830185610cda565b611089602083018461105a565b9392505050565b5f81905092915050565b5f6110a482610d2b565b6110ae8185611090565b93506110be818560208601610d45565b80840191505092915050565b5f6110d5828461109a565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061112457607f821691505b602082108103611137576111366110e0565b5b50919050565b7f56616c7565206d757374206265206772656174657265207468616e20300000005f82015250565b5f611171601d83610eac565b915061117c8261113d565b602082019050919050565b5f6020820190508181035f83015261119e81611165565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61120982610cd1565b915061121483610cd1565b925082611224576112236111a5565b5b828204905092915050565b5f61123982610cd1565b915061124483610cd1565b925082820261125281610cd1565b91508282048414831517611269576112686111d2565b5b5092915050565b5f6040820190506112835f830185610f44565b6112906020830184610cda565b9392505050565b5f8115159050919050565b6112ab81611297565b81146112b5575f80fd5b50565b5f815190506112c6816112a2565b92915050565b5f602082840312156112e1576112e0610b46565b5b5f6112ee848285016112b8565b91505092915050565b7f446578206973206c6f77206f6e2062616c616e636500000000000000000000005f82015250565b5f61132b601583610eac565b9150611336826112f7565b602082019050919050565b5f6020820190508181035f8301526113588161131f565b9050919050565b5f6060820190506113725f830186610f44565b61137f6020830185610f44565b61138c6040830184610cda565b949350505050565b5f69ffffffffffffffffffff82169050919050565b6113b281611394565b81146113bc575f80fd5b50565b5f815190506113cd816113a9565b92915050565b5f819050919050565b6113e5816113d3565b81146113ef575f80fd5b50565b5f81519050611400816113dc565b92915050565b5f8151905061141481610e57565b92915050565b5f805f805f60a0868803121561143357611432610b46565b5b5f611440888289016113bf565b9550506020611451888289016113f2565b945050604061146288828901611406565b935050606061147388828901611406565b9250506080611484888289016113bf565b9150509295509295909350565b61149a8161104e565b81146114a4575f80fd5b50565b5f815190506114b581611491565b92915050565b5f602082840312156114d0576114cf610b46565b5b5f6114dd848285016114a7565b9150509291505056fea264697066735822122096c21dfb8840a2adadfe4c1b34844af3ae865260bdec04bd5d93489364a090fc64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 788,
        "contract": "contracts/DexLow.sol:SwapperSting",
        "label": "tokenNames",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 793,
        "contract": "contracts/DexLow.sol:SwapperSting",
        "label": "tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_contract(Token)782)"
      },
      {
        "astId": 797,
        "contract": "contracts/DexLow.sol:SwapperSting",
        "label": "tokenPrices",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_contract(Token)782": {
        "encoding": "inplace",
        "label": "contract Token",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_contract(Token)782)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => contract Token)",
        "numberOfBytes": "32",
        "value": "t_contract(Token)782"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}