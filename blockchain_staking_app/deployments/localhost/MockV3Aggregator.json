{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "_initialAnswer",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        }
      ],
      "name": "updateAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startedAt",
          "type": "uint256"
        }
      ],
      "name": "updateRoundData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x967e30347ff70d14b91fd9a82599f152ad2f77da6c388e53ceb981580d648e20",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "678180",
    "logsBloom": "0x
    "blockHash": "0x49dba01b4916d06615f03293497f227c769fc76f2141b340dc055f1d718759bf",
    "transactionHash": "0x967e30347ff70d14b91fd9a82599f152ad2f77da6c388e53ceb981580d648e20",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "678180",
    "status": 1,
    "byzantium": true
  },
  "args": [
    8,
    184300000000
  ],
  "numDeployments": 1,
  "solcInputHash": "6651b0818f03e651b0bc5f0c0d9050c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startedAt\",\"type\":\"uint256\"}],\"name\":\"updateRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"MockV3Aggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\":\"MockV3Aggregator\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/**\\n * @title MockV3Aggregator\\n * @notice Based on the FluxAggregator contract\\n * @notice Use this contract when you need to test\\n * other contract's ability to read data from an\\n * aggregator contract, but how the aggregator got\\n * its answer is unimportant\\n */\\ncontract MockV3Aggregator is AggregatorV2V3Interface {\\n  uint256 public constant override version = 0;\\n\\n  uint8 public override decimals;\\n  int256 public override latestAnswer;\\n  uint256 public override latestTimestamp;\\n  uint256 public override latestRound;\\n\\n  mapping(uint256 => int256) public override getAnswer;\\n  mapping(uint256 => uint256) public override getTimestamp;\\n  mapping(uint256 => uint256) private getStartedAt;\\n\\n  constructor(uint8 _decimals, int256 _initialAnswer) {\\n    decimals = _decimals;\\n    updateAnswer(_initialAnswer);\\n  }\\n\\n  function updateAnswer(int256 _answer) public {\\n    latestAnswer = _answer;\\n    latestTimestamp = block.timestamp;\\n    latestRound++;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = block.timestamp;\\n    getStartedAt[latestRound] = block.timestamp;\\n  }\\n\\n  function updateRoundData(\\n    uint80 _roundId,\\n    int256 _answer,\\n    uint256 _timestamp,\\n    uint256 _startedAt\\n  ) public {\\n    latestRound = _roundId;\\n    latestAnswer = _answer;\\n    latestTimestamp = _timestamp;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = _timestamp;\\n    getStartedAt[latestRound] = _startedAt;\\n  }\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\\n  }\\n\\n  function latestRoundData()\\n    external\\n    view\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return (\\n      uint80(latestRound),\\n      getAnswer[latestRound],\\n      getStartedAt[latestRound],\\n      getTimestamp[latestRound],\\n      uint80(latestRound)\\n    );\\n  }\\n\\n  function description() external pure override returns (string memory) {\\n    return \\\"v0.8/tests/MockV3Aggregator.sol\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x7a5ac06d48ad507a441c8de5f813765f3beed7fb47aa88b26ad34c020ea0c644\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b5060405162000a5e38038062000a5e8339818101604052810190610033919061013f565b815f806101000a81548160ff021916908360ff16021790555061005b8161006260201b60201c565b50506101fa565b806001819055504260028190555060035f815480929190610082906101b3565b91905055508060045f60035481526020019081526020015f20819055504260055f60035481526020019081526020015f20819055504260065f60035481526020019081526020015f208190555050565b5f80fd5b5f60ff82169050919050565b6100eb816100d6565b81146100f5575f80fd5b50565b5f81519050610106816100e2565b92915050565b5f819050919050565b61011e8161010c565b8114610128575f80fd5b50565b5f8151905061013981610115565b92915050565b5f8060408385031215610155576101546100d2565b5b5f610162858286016100f8565b92505060206101738582860161012b565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f819050919050565b5f6101bd826101aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036101ef576101ee61017d565b5b600182019050919050565b61085680620002085f395ff3fe608060405234801561000f575f80fd5b50600436106100b2575f3560e01c80638205bf6a1161006f5780638205bf6a146101685780639a6fc8f514610186578063a87a20ce146101ba578063b5ab58dc146101d6578063b633620c14610206578063feaf968c14610236576100b2565b8063313ce567146100b65780634aa2011f146100d457806350d25bcd146100f057806354fd4d501461010e578063668a0f021461012c5780637284e4161461014a575b5f80fd5b6100be610258565b6040516100cb91906104ab565b60405180910390f35b6100ee60048036038101906100e9919061056d565b610268565b005b6100f86102d7565b60405161010591906105e0565b60405180910390f35b6101166102dd565b6040516101239190610608565b60405180910390f35b6101346102e1565b6040516101419190610608565b60405180910390f35b6101526102e7565b60405161015f91906106ab565b60405180910390f35b610170610324565b60405161017d9190610608565b60405180910390f35b6101a0600480360381019061019b91906106cb565b61032a565b6040516101b1959493929190610705565b60405180910390f35b6101d460048036038101906101cf9190610756565b61039e565b005b6101f060048036038101906101eb9190610781565b61040e565b6040516101fd91906105e0565b60405180910390f35b610220600480360381019061021b9190610781565b610423565b60405161022d9190610608565b60405180910390f35b61023e610438565b60405161024f959493929190610705565b60405180910390f35b5f8054906101000a900460ff1681565b8369ffffffffffffffffffff1660038190555082600181905550816002819055508260045f60035481526020019081526020015f20819055508160055f60035481526020019081526020015f20819055508060065f60035481526020019081526020015f208190555050505050565b60015481565b5f81565b60035481565b60606040518060400160405280601f81526020017f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00815250905090565b60025481565b5f805f805f8560045f8869ffffffffffffffffffff1681526020019081526020015f205460065f8969ffffffffffffffffffff1681526020019081526020015f205460055f8a69ffffffffffffffffffff1681526020019081526020015f2054899450945094509450945091939590929450565b806001819055504260028190555060035f8154809291906103be906107d9565b91905055508060045f60035481526020019081526020015f20819055504260055f60035481526020019081526020015f20819055504260065f60035481526020019081526020015f208190555050565b6004602052805f5260405f205f915090505481565b6005602052805f5260405f205f915090505481565b5f805f805f60035460045f60035481526020019081526020015f205460065f60035481526020019081526020015f205460055f60035481526020019081526020015f2054600354945094509450945094509091929394565b5f60ff82169050919050565b6104a581610490565b82525050565b5f6020820190506104be5f83018461049c565b92915050565b5f80fd5b5f69ffffffffffffffffffff82169050919050565b6104e6816104c8565b81146104f0575f80fd5b50565b5f81359050610501816104dd565b92915050565b5f819050919050565b61051981610507565b8114610523575f80fd5b50565b5f8135905061053481610510565b92915050565b5f819050919050565b61054c8161053a565b8114610556575f80fd5b50565b5f8135905061056781610543565b92915050565b5f805f8060808587031215610585576105846104c4565b5b5f610592878288016104f3565b94505060206105a387828801610526565b93505060406105b487828801610559565b92505060606105c587828801610559565b91505092959194509250565b6105da81610507565b82525050565b5f6020820190506105f35f8301846105d1565b92915050565b6106028161053a565b82525050565b5f60208201905061061b5f8301846105f9565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561065857808201518184015260208101905061063d565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61067d82610621565b610687818561062b565b935061069781856020860161063b565b6106a081610663565b840191505092915050565b5f6020820190508181035f8301526106c38184610673565b905092915050565b5f602082840312156106e0576106df6104c4565b5b5f6106ed848285016104f3565b91505092915050565b6106ff816104c8565b82525050565b5f60a0820190506107185f8301886106f6565b61072560208301876105d1565b61073260408301866105f9565b61073f60608301856105f9565b61074c60808301846106f6565b9695505050505050565b5f6020828403121561076b5761076a6104c4565b5b5f61077884828501610526565b91505092915050565b5f60208284031215610796576107956104c4565b5b5f6107a384828501610559565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6107e38261053a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610815576108146107ac565b5b60018201905091905056fea2646970667358221220050daed2b657763cbaa64ab22cd8caa7af62740fcf85e5d0cd10dd16a9ec108064736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106100b2575f3560e01c80638205bf6a1161006f5780638205bf6a146101685780639a6fc8f514610186578063a87a20ce146101ba578063b5ab58dc146101d6578063b633620c14610206578063feaf968c14610236576100b2565b8063313ce567146100b65780634aa2011f146100d457806350d25bcd146100f057806354fd4d501461010e578063668a0f021461012c5780637284e4161461014a575b5f80fd5b6100be610258565b6040516100cb91906104ab565b60405180910390f35b6100ee60048036038101906100e9919061056d565b610268565b005b6100f86102d7565b60405161010591906105e0565b60405180910390f35b6101166102dd565b6040516101239190610608565b60405180910390f35b6101346102e1565b6040516101419190610608565b60405180910390f35b6101526102e7565b60405161015f91906106ab565b60405180910390f35b610170610324565b60405161017d9190610608565b60405180910390f35b6101a0600480360381019061019b91906106cb565b61032a565b6040516101b1959493929190610705565b60405180910390f35b6101d460048036038101906101cf9190610756565b61039e565b005b6101f060048036038101906101eb9190610781565b61040e565b6040516101fd91906105e0565b60405180910390f35b610220600480360381019061021b9190610781565b610423565b60405161022d9190610608565b60405180910390f35b61023e610438565b60405161024f959493929190610705565b60405180910390f35b5f8054906101000a900460ff1681565b8369ffffffffffffffffffff1660038190555082600181905550816002819055508260045f60035481526020019081526020015f20819055508160055f60035481526020019081526020015f20819055508060065f60035481526020019081526020015f208190555050505050565b60015481565b5f81565b60035481565b60606040518060400160405280601f81526020017f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00815250905090565b60025481565b5f805f805f8560045f8869ffffffffffffffffffff1681526020019081526020015f205460065f8969ffffffffffffffffffff1681526020019081526020015f205460055f8a69ffffffffffffffffffff1681526020019081526020015f2054899450945094509450945091939590929450565b806001819055504260028190555060035f8154809291906103be906107d9565b91905055508060045f60035481526020019081526020015f20819055504260055f60035481526020019081526020015f20819055504260065f60035481526020019081526020015f208190555050565b6004602052805f5260405f205f915090505481565b6005602052805f5260405f205f915090505481565b5f805f805f60035460045f60035481526020019081526020015f205460065f60035481526020019081526020015f205460055f60035481526020019081526020015f2054600354945094509450945094509091929394565b5f60ff82169050919050565b6104a581610490565b82525050565b5f6020820190506104be5f83018461049c565b92915050565b5f80fd5b5f69ffffffffffffffffffff82169050919050565b6104e6816104c8565b81146104f0575f80fd5b50565b5f81359050610501816104dd565b92915050565b5f819050919050565b61051981610507565b8114610523575f80fd5b50565b5f8135905061053481610510565b92915050565b5f819050919050565b61054c8161053a565b8114610556575f80fd5b50565b5f8135905061056781610543565b92915050565b5f805f8060808587031215610585576105846104c4565b5b5f610592878288016104f3565b94505060206105a387828801610526565b93505060406105b487828801610559565b92505060606105c587828801610559565b91505092959194509250565b6105da81610507565b82525050565b5f6020820190506105f35f8301846105d1565b92915050565b6106028161053a565b82525050565b5f60208201905061061b5f8301846105f9565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561065857808201518184015260208101905061063d565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61067d82610621565b610687818561062b565b935061069781856020860161063b565b6106a081610663565b840191505092915050565b5f6020820190508181035f8301526106c38184610673565b905092915050565b5f602082840312156106e0576106df6104c4565b5b5f6106ed848285016104f3565b91505092915050565b6106ff816104c8565b82525050565b5f60a0820190506107185f8301886106f6565b61072560208301876105d1565b61073260408301866105f9565b61073f60608301856105f9565b61074c60808301846106f6565b9695505050505050565b5f6020828403121561076b5761076a6104c4565b5b5f61077884828501610526565b91505092915050565b5f60208284031215610796576107956104c4565b5b5f6107a384828501610559565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6107e38261053a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610815576108146107ac565b5b60018201905091905056fea2646970667358221220050daed2b657763cbaa64ab22cd8caa7af62740fcf85e5d0cd10dd16a9ec108064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "MockV3Aggregator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "decimals",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 118,
        "contract": "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestAnswer",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 121,
        "contract": "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 124,
        "contract": "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestRound",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 129,
        "contract": "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getAnswer",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 134,
        "contract": "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 138,
        "contract": "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getStartedAt",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}